#!/usr/bin/env python

"""Usage:
   soc_sci_maps_build_manfest <original_identifier>

Produce an IIIF manifest file for the Social Scientists Maps Collection.
"""

import re
import sqlite3
import sys
import urllib.parse
import uuid
import xml.etree.ElementTree as ElementTree
from classes import SocSciMapsIIIFManifest
from docopt import docopt
from PIL import Image
Image.MAX_IMAGE_PIXELS = 1000000000


class SocSciMapsIIIFManifest:
    def __init__(self, dc):
        self.dc = dc

    def identifier(self):
        c = re.sub('^.*\/', '', self.dc.identifier[0])
        return 'https://iiif-manifest.lib.uchicago.edu/maps/chisoc/{}/{}.json'.format(c, c)

    def get_image_resource_url(self, path):
        """Return the URL for something served up via the imageserver. 
     
        :param path - a string, path to this thing under IIIF_Files. e.g., /maps/...
        must start with a slash. 
        """
        return 'https://iiif-server.lib.uchicago.edu/{}/full/full/0/default.jpg'.format(urllib.parse.quote(path, safe=''))

    def __str__(self):
        manifest = Manifest(self.identifier())
        manifest.type = "Manifest"
        
        try:
            manifest.label = self.dc.title[0]
        except IndexError:
            manifest.label = ''

        try:
            manifest.description = self.dc.description[0]
        except IndexError:
            manifest.description = ''
    
        metadata = []
        metadata.append(MetadataField('Identifier', self.identifier()))
        for l in ('Coverage', 'Creator', 'Description', 'Extent', 'Format',
                  'Medium', 'Relation', 'Subject', 'Title', 'Type'):
            metadata.extend([MetadataField(l, v) for v in getattr(self.dc, l.lower())])
        manifest.set_metadata(metadata)
    
        sequence_id = 'https://www.lib.uchicago.edu/{}'.format(str(uuid.uuid4()))
        sequence = Sequence(sequence_id)

        identifier = self.dc.identifier[0].replace('http://pi.lib.uchicago.edu/1001/', '')

        img_path = '{}/tifs/{}.tif'.format(
            identifier,
            identifier.split('/').pop()
        )

        img = ImageResource(
            'https',
            'iiif-server.lib.uchicago.edu',
            '',
            urllib.parse.quote(img_path, safe=''),
            'image/tiff'
        )

        i = Image.open(BytesIO(
            requests.get(self.get_image_resource_url(img_path)).content
        ))
    
        canvas_id = 'https://www.lib.uchicago.edu/{}'.format(str(uuid.uuid4()))
        # should be the http(s) URI where JSON representation is published. 
        canvas = Canvas(canvas_id)
        canvas.label = '[1]'
        canvas.set_height(i.size[0])
        canvas.set_width(i.size[1])

        annotation_id = 'https://www.lib.uchicago.edu/{}'.format(str(uuid.uuid4()))
        annotation = Annotation(annotation_id, canvas_id)

        img.set_height(i.size[0])
        img.set_width(i.size[1])
    
        annotation.resource = img
        canvas.images = [annotation]
        sequence.canvases = [canvas]
        manifest.sequences = [sequence]
    
        return str(manifest)


def main():
    options = docopt(__doc__)

    conn = sqlite3.connect('/data/s4/jej/ark_data.db')
    c = conn.cursor()
    c.execute(
        "SELECT * FROM arks WHERE original_identifier=?", 
        (options['<original_identifier>'],)
    )
    result = c.fetchone()

    # get the marcxml here. 
    print(result[1])
    sys.exit()

    

    sys.stdout.write(str(SocSciMapsIIIFManifest(digital_record, print_record)))

if __name__ == '__main__':
    main()
