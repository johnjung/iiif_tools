#!/usr/bin/env python

"""Usage:
   ssmaps_build_collection (--root | --browse-root | --list-root | --list-date | --browse-subject | --subject=<subject> | --browse-date | --date=<date>) <domain> [--output-file=<output-file>]

This command gets MARCXML from the social scientist maps IIIF_Files
directories and builds an IIIF Collection json document.
"""

import json, os, requests, shutil, sqlite3, sys
import urllib.parse
import xml.etree.ElementTree as ET
from docopt import docopt

def get_size_for_socsci_identifier(s):
    return {
        'G4104-C6-1933-U5-g': (3365, 4399), 
        'G4104-C6E625-1930-U5': (6985, 9521),
        'G4104-C6-2N6-1920z-U5': (11287, 6775),
        'G4104-C6-1933-U5-b': (3365, 4399),
        'G4104-C6-1933-U5-k': (3365, 4399),
        'G4104-C6E625-1927-S5': (3527, 6319),
        'G4104-C6E625-1920-S5': (3527, 6359),
        'G4104-C6-2N15-1920z-U5': (11883, 7124),
        'G4104-C6-2W9-1920z-U5': (10159, 7385),
        'G4104-C6-2M2-1924-U5': (9328, 7234),
        'G4104-C6P3-1943-M21': (4379, 6780),
        'G4104-C6P3-1943-M2': (4379, 6780),
        'G4104-C6-1933-U5-i': (3365, 4399),
        'G4104-C6E1-1940-U55': (8793, 13399),
        'G4104-C6E625-1926-T5': (7419, 10749),
        'G4104-C6-1933-U5-c': (3365, 4399),
        'G4104-C6-2E6-1924-U5': (10106, 11804),
        'G4104-C6-2L3-1925-U5': (11427, 12021),
        'G4104-C6-2N3-1927-U5': (14480, 8439),
        'G4104-C6-2E15-1924-U5': (8972, 8032),
        'G4104-C6-1933-U5-o': (3365, 4399),
        'G4104-C6-2L9-1920z-U5': (10825, 6919),
        'G4104-C6E625-1930-R4': (1824, 2694),
        'G4104-C6-2H9-1920z-U5': (7639, 7297),
        'G4104-C6-1933-U5-l': (3365, 4399),
        'G4104-C6E625-1910-R4': (1834, 2734),
        'G4104-C6-1933-U5-e': (3365, 4399),
        'G4104-C6-1933-U5-f': (3365, 4399),
        'G4104-C6P3-1940z-P7': (4379, 6780),
        'G4104-C6E1-1926-C5': (7308, 10797),
        'G4104-C6-2W9Q4-1930z-U5': (6205, 44700),
        'G4104-C6-2H9E11-1956-T3': (12104, 16524),
        'G4104-C6-1933-U5-a': (3385, 4409),
        'G4104-C6-1933-U5-h': (3365, 4399),
        'G4104-C6-2N3E51-1908-S2': (8290, 5107),
        'G4104-C6-1933-U5-p': (3365, 4399),
        'G4104-C6-2B7-1923-U5': (6462, 8936),
        'G4104-C6-2B8-1923-U5': (7128, 9769),
        'G4104-C6P3-1940-M3': (6780, 8782),
        'G4104-C6-1933-U5-d': (3365, 4399),
        'G4104-C6-2W8-1925-U5': (13581, 9546),
        'G4104-C6-1933-U5-n': (3365, 4399),
        'G4104-C6-1933-U5-j': (3365, 4399),
        'G4104-C6-1933-U5-m': (3365, 4399),
        'G4104-C6E625-1933-N2': (3387, 4396)
    }[s]

def get_ark_for_socsci_identifier(s):
    conn = sqlite3.connect('/data/s4/jej/ark_data.db')
    c = conn.cursor()
    c.execute("SELECT ark FROM arks WHERE original_identifier=?", (s,))
    return c.fetchone()[0]

def collection_skeleton(at_id, description, viewinghint):
    return {
        '@context': [ 
            'http://iiif.io/api/presentation/3/context.json' 
        ],
        'id': at_id,
        'type': 'Collection',
        'label': {
            'en': [
                description
            ]
        },
        'description': {
            'en': [
                'description'
            ]
        },
        'behavior': [ viewinghint ],
        'items': []
    }

def socsci_identifiers():
    # because dates appear in multiple formats which don't lend
    # themselves to sorting, this list has been manually sorted
    return (
        'G4104-C6-2N3E51-1908-S2',
        'G4104-C6-2L9-1920z-U5',
        'G4104-C6-2N15-1920z-U5',
        'G4104-C6-2H9-1920z-U5',
        'G4104-C6-2N6-1920z-U5',
        'G4104-C6-2W9-1920z-U5',
        'G4104-C6-2B7-1923-U5',
        'G4104-C6-2B8-1923-U5',
        'G4104-C6-2E15-1924-U5',
        'G4104-C6-2E6-1924-U5',
        'G4104-C6-2M2-1924-U5',
        'G4104-C6-2L3-1925-U5',
        'G4104-C6-2W8-1925-U5',
        'G4104-C6E1-1926-C5',
        'G4104-C6-2N3-1927-U5',
        'G4104-C6E625-1920-S5',
        'G4104-C6E625-1927-S5',
        'G4104-C6E625-1930-U5',
        'G4104-C6-2W9Q4-1930z-U5',
        'G4104-C6-1933-U5-a',
        'G4104-C6-1933-U5-b',
        'G4104-C6-1933-U5-c',
        'G4104-C6-1933-U5-d',
        'G4104-C6-1933-U5-g',
        'G4104-C6-1933-U5-h',
        'G4104-C6-1933-U5-i',
        'G4104-C6-1933-U5-j',
        'G4104-C6-1933-U5-k',
        'G4104-C6-1933-U5-l',
        'G4104-C6-1933-U5-m',
        'G4104-C6-1933-U5-e',
        'G4104-C6-1933-U5-f',
        'G4104-C6-1933-U5-n',
        'G4104-C6-1933-U5-o',
        'G4104-C6E625-1910-R4',
        'G4104-C6E625-1930-R4',
        'G4104-C6E625-1933-N2',
        'G4104-C6-1933-U5-p',
        'G4104-C6E625-1926-T5',
        'G4104-C6E1-1940-U55',
        'G4104-C6P3-1940-M3',
        'G4104-C6P3-1940z-P7',
        'G4104-C6P3-1943-M2',
        'G4104-C6P3-1943-M21', 
        'G4104-C6-2H9E11-1956-T3',
    )

def get_dc_for_identifier(i):
    conn = sqlite3.connect('/data/s4/jej/ark_data.db')
    c = conn.cursor()
    c.execute("SELECT * FROM arks WHERE original_identifier=?", (i,))
    result = c.fetchone()

    url = 'https://ark.lib.uchicago.edu/{}/file.dc.xml'.format(result[1])

    return ET.fromstring(requests.get(url).text)

def root(domain):
    collection = collection_skeleton(
        '{}/social-scientists-map-chicago.json'.format(domain),
        'Social Scientists Maps collection from the University of Chicago Library.',
        'multi-part'
    )

    collection['items'] = [
        {
            'type': 'Manifest',
            'id': '{}/social-scientists-map-chicago/cluster-browse.json'.format(domain),
            'behavior': [ 'multi-part' ],
            'label': { 'en': [ 'Browse the Social Scientists Map collection.' ] }
        },
        {
            'type': 'Manifest',
            'id': '{}/social-scientists-map-chicago/list-browse.json'.format(domain),
            'behavior': [ 'multi-part' ],
            'label': { 'en': [ 'List items in the Social Scientists Map collection.' ] }
        }
    ]

    return collection

def browse_root(domain):
    collection = collection_skeleton(
        '{}/social-scientists-map-chicago/cluster-browse.json'.format(domain),
        'Browse the Social Scientists Maps collection from the University of Chicago Library.',
        'multi-part'
    )

    collection['items'] = [
        {
            'type': 'Manifest',
            'id': '{}/social-scientists-map-chicago/cluster-browse/date.json'.format(domain),
            'behavior': [ 'multi-part' ],
            'label': { 'en': [ 'Browse the Social Scientists Map collection by date.' ] }
        },
        {
            'type': 'Manifest',
            'id': '{}/social-scientists-map-chicago/cluster-browse/subject.json'.format(domain),
            'behavior': [ 'multi-part' ],
            'label': { 'en': [ 'Browse the Social Scientists Map collection by subject.' ] }
        }
    ]

    return collection

def list_root(domain):
    collection = collection_skeleton(
        '{}/social-scientists-map-chicago/list-browse.json'.format(domain),
        'List items from the Social Scientists Maps collection from the University of Chicago Library.',
        'multi-part'
    )

    collection['items'] = [
        {
            'type': 'Manifest',
            'id': '{}/social-scientists-map-chicago/list-browse/date.json'.format(domain),
            'behavior': [ 'multi-part' ],
            'label': { 'en': [ 'List items from the Social Scientists Map collection by date.' ] }
        }
    ]

    return collection

def list_date(domain):
    collection = collection_skeleton(
        '{}/social-scientists-map-chicago/list-browse/date.json'.format(domain),
        'List items from the Social Scientists Maps collection from the University of Chicago Library by date.',
        'individuals'
    )

    for i in socsci_identifiers():
        ark = get_ark_for_socsci_identifier(i)
        noid = ark.split('/')[1]
        dc = get_dc_for_identifier(i)
        size = get_size_for_socsci_identifier(i)

        if size[0] > size[1]:
            thumbnail_size = (500, int(500.0 / size[0] * size[1]))
        else:
            thumbnail_size = (int(500.0 / size[1] * size[0]), 500)

        collection['items'].append({
            'type': 'Manifest',
            'id': '{}/social-scientists-map-chicago/object/{}.json'.format(domain, noid),
            'behavior': [ 'multi-part' ],
            'label': { 'en': [ dc.find('{http://purl.org/dc/elements/1.1/}title').text ] },
            'metadata': metadata(dc),
            'thumbnail': [
                {
                    'id': 'https://iiif-server.lib.uchicago.edu/{}/full/{},{}/0/default.jpg'.format(
                        urllib.parse.quote(get_ark_for_socsci_identifier(i), safe=''),
                        thumbnail_size[0],
                        thumbnail_size[1]
                    ),
                    'type': 'Image',
                    'format': 'image/jpeg',
                    'width': thumbnail_size[0],
                    'height': thumbnail_size[1]
                }
            ],
        })
    return collection

def browse_date(domain):
    collection = collection_skeleton(
        '{}/social-scientists-map-chicago/cluster-browse/date.json'.format(domain),
        'Browse the Social Scientists Maps collection by date.',
        'multi-part'
    )
    dates = set()
    for i in socsci_identifiers():
        dc = get_dc_for_identifier(i)
        for d in dc.findall('{http://purl.org/dc/terms/}issued'):
            for s in d.text.split('/'):
                dates.add('{}0s'.format(s[:3]))

    for d in sorted(list(dates)):
        collection['items'].append({
            'type': 'Collection',
            'id':
            '{}/social-scientists-map-chicago/cluster-browse/date/{}.json'.format(domain, d),
            'behavior': [ 'multi-part' ],
            'label': { 'en': [ d ] }
        })
    return collection

def date(domain, d):
    slug = d.lower().replace(' ', '-')
    collection = collection_skeleton(
        '{}/social-scientists-map-chicago/cluster-browse/date/{}.json'.format(domain, slug),
        'Browse the Social Scientists Maps collection by date in the {}.'.format(d),
        'individuals'
    )

    for i in socsci_identifiers():
        ark = get_ark_for_socsci_identifier(i)
        noid = ark.split('/')[1]
        dc = get_dc_for_identifier(i)

        slugs = []
        for s in dc.findall('{http://purl.org/dc/terms/}issued'):
            for t in s.text.split('/'):
                slugs.append('{}0s'.format(t[:3]))

        size = get_size_for_socsci_identifier(i)
        if size[0] > size[1]:
            thumbnail_size = (500, int(500.0 / size[0] * size[1]))
        else:
            thumbnail_size = (int(500.0 / size[1] * size[0]), 500)

        if slug in slugs:
            collection['items'].append({
                'type': 'Manifest',
                'id': '{}/social-scientists-map-chicago/object/{}.json'.format(domain, noid),
                'behavior': [ 'multi-part' ],
                'label': { 'en': [ dc.find('{http://purl.org/dc/elements/1.1/}title').text ] },
                'metadata': metadata(dc),
                'thumbnail': [
                    {
                        'id': 'https://iiif-server.lib.uchicago.edu/{}/full/{},{}/0/default.jpg'.format(
                            urllib.parse.quote(get_ark_for_socsci_identifier(i), safe=''),
                            thumbnail_size[0],
                            thumbnail_size[1]
                        ),
                        'type': 'Image',
                        'format': 'image/jpeg',
                        'width': thumbnail_size[0],
                        'height': thumbnail_size[1]
                    }
                ],
            })

    return collection

def browse_subject(domain):
    collection = collection_skeleton(
        '{}/social-scientists-map-chicago/cluster-browse/subject.json'.format(domain),
        'Browse the Social Scientists Maps collection by subject.',
        'multi-part'
    )
    subjects = set()
    for i in socsci_identifiers():
        dc = get_dc_for_identifier(i)
        for s in dc.findall('{http://purl.org/dc/elements/1.1/}subject'):
            subjects.add(s.text)

    for s in sorted(list(subjects)):
        collection['items'].append({
            'type': 'Collection',
            'id':
            '{}/social-scientists-map-chicago/cluster-browse/subject/{}.json'.format(domain, s.lower().replace(' ', '-')),
            'behavior': [ 'multi-part' ],
            'label': { 'en': [ s ] }
        })
    return collection

def subject(domain, s):
    subject_slug = s.lower().replace(' ', '-')
    collection = collection_skeleton(
        '{}/social-scientists-map-chicago/cluster-browse/subject/{}.json'.format(domain, subject_slug),
        'Browse the Social Scientists Maps collection by the subject: {}.'.format(s),
        'individuals'
    )

    for i in socsci_identifiers():
        ark = get_ark_for_socsci_identifier(i)
        noid = ark.split('/')[1]
        dc = get_dc_for_identifier(i)
        subject_slugs = [s.text.lower().replace(' ', '-') for s in dc.findall('{http://purl.org/dc/elements/1.1/}subject')]

        size = get_size_for_socsci_identifier(i)
        if size[0] > size[1]:
            thumbnail_size = (500, int(500.0 / size[0] * size[1]))
        else:
            thumbnail_size = (int(500.0 / size[1] * size[0]), 500)

        if subject_slug in subject_slugs:
            collection['items'].append({
                'type': 'Manifest',
                'id': '{}/social-scientists-map-chicago/object/{}.json'.format(domain, noid),
                'behavior': [ 'multi-part' ],
                'label': { 'en': [ dc.find('{http://purl.org/dc/elements/1.1/}title').text ] },
                'metadata': metadata(dc),
                'thumbnail': [
                    {
                        'id': 'https://iiif-server.lib.uchicago.edu/{}/full/{},{}/0/default.jpg'.format(
                            urllib.parse.quote(get_ark_for_socsci_identifier(i), safe=''),
                            thumbnail_size[0],
                            thumbnail_size[1]
                        ),
                        'type': 'Image',
                        'format': 'image/jpeg',
                        'width': thumbnail_size[0],
                        'height': thumbnail_size[1]
                    }
                ],
            })

    return collection

def metadata(dc):
    output = []
    for label, xpaths in (
        (
            'Title',
            [
                '{http://purl.org/dc/elements/1.1/}title'
            ]
        ),
        (
            'Creator',
            [
                '{http://www.loc.gov/mads/rdf/v1#}ConferenceName',
                '{http://www.loc.gov/mads/rdf/v1#}CorporateName',
                '{http://www.loc.gov/mads/rdf/v1#}PersonalName'
            ]
        ),
        (
            'Date',
            [
                '{http://purl.org/dc/terms/}issued'
            ]
        ),
        (
            'Publisher',
            [
                '{http://purl.org/dc/elements/1.1/}publisher'
            ]
        ),
        (
            'Language',
            [
                '{http://purl.org/dc/elements/1.1/}language'
            ]
        )
    ):
        for x in xpaths:
            for e in dc.findall(x):
                output.append({
                    'label': { 'en': [ label ] },
                    'value': { 'en': [ e.text ] },
                })
    return output

def main():
    options = docopt(__doc__)

    if options['--root']:
        j = root(options['<domain>'])
    elif options['--browse-root']:
        j = browse_root(options['<domain>'])
    elif options['--list-root']:
        j = list_root(options['<domain>'])
    elif options['--list-date']:
        j = list_date(options['<domain>'])
    elif options['--browse-date']:
        j = browse_date(options['<domain>'])
    elif options['--date']:
        j = date(options['<domain>'], options['--date'])
    elif options['--browse-subject']:
        j = browse_subject(options['<domain>'])
    elif options['--subject']:
        j = subject(options['<domain>'], options['--subject'])

    if options['--output-file']:
        try:
            os.makedirs(os.path.dirname(os.path.abspath(options['--output-file'])))
        except FileExistsError:
            pass
        try:
            os.makedirs('/tmp/' + os.path.dirname(os.path.abspath(options['--output-file'])))
        except FileExistsError:
            pass
        try:
            shutil.copyfile(
                options['--output-file'],
                '/tmp/' + os.path.abspath(options['--output-file'])
            )
        except FileNotFoundError:
            pass
        f = open(options['--output-file'], 'w')
    else:
        f = sys.stdout

    f.write(json.dumps(j, indent=4, sort_keys=True))

if __name__ == '__main__':
    main()
