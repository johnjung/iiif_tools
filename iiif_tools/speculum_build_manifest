#!/usr/bin/env python

"""Usage:
   speculum_build_manifest <ark>
"""

from classes import IIIFManifest
from classes import get_ark_from_original_identifier, get_original_identifier_from_ark
from docopt import docopt
import json
import requests

from io import BytesIO
from PIL import Image
Image.MAX_IMAGE_PIXELS = 2000000000

class SpeculumIIIFManifest(IIIFManifest):
    """Make a v3 manifest for one of the speculum documents.
       e.g. https://iiif-manifest.lib.uchicago.edu/speculum/0001/speculum-0001.json
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        with BytesIO(
            requests.get('http://ark.lib.uchicago.edu/{}/file.tif'.format(
                self.ark
            )).content
        ) as f:
            self.image_sizes.append(Image.open(f).size)

    def _get_metadata(self):
        with open('metadata/speculum.json') as f:
            data = json.load(f)

        metadata = []
        for m in data[self.identifier]:
            metadata.append({
                'label': { 'en': [ m['label'] ] },
                'value': { 'en': [ m['value'] ] }
            })
        metadata.append({
            'label': { 'en': [ 'Description' ] },
            'value': { 'en': [ self.summary ] }
        })
        metadata.append({
            'label': { 'en': [ 'Attribution' ] },
            'value': { 'en': [ self.required_statement ] }
        })
        metadata.append({
            'label': { 'en': [ 'ARK Identifier' ] },
            'value': { 'en': [ self.ark ] }
        })
        metadata.append({
            'label': { 'en': [ 'License' ] },
            'value': { 'en': [ '<a href="https://creativecommons.org/licenses/by-nc/4.0/">https://creativecommons.org/licenses/by-nc/4.0/</a>' ] }
        })
          
        return metadata

if __name__ == '__main__':
    arguments = docopt(__doc__)

    identifier = get_original_identifier_from_ark(arguments['<ark>'])

    with open('metadata/speculum.json') as f:
        metadata = json.load(f)

    title = None
    for m in metadata[identifier]:
        if m['label'] == 'Title':
            title = m['value']
    assert title is not None

    print(
        json.dumps(
            SpeculumIIIFManifest(
                identifier,
                arguments['<ark>'],
                title,
                'Speculum Romanae Magnificentiae from the University of Chicago.',
                'University of Chicago Library'
            ).data(),
            indent=4,
            sort_keys=True
        )
    )
