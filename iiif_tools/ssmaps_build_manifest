#!/usr/bin/env python

"""Usage:
   ssmaps_build_manfest <ark> <domain>

Produce a V3 IIIF manifest file for the Social Scientists Maps Collection.
"""

import json
import requests
import xml.etree.ElementTree as ElementTree
from classes import get_ark_from_original_identifier, get_original_identifier_from_ark
from classes import IIIFManifest
from docopt import docopt
from io import BytesIO
from PIL import Image
Image.MAX_IMAGE_PIXELS = 1000000000


class SSMapsIIIFManifest(IIIFManifest):
    """Make a v3 manifest for one of the social scientists maps.
       e.g. https://iiif-manifest.lib.uchicago.edu/maps/chisoc/G4104-C6E1-1940-U55/G4104-C6E1-1940-U55.json
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        with BytesIO(
            requests.get('http://ark.lib.uchicago.edu/{}/file.tif'.format(
                self.ark
            )).content
        ) as f:
            self.image_sizes.append(Image.open(f).size)

    def _get_manifest_url(self):
        return '{}/social-scientists-map-chicago/object/{}.json'.format(
            self.domain,
            self.ark.split('/')[-1]
        )

    def _get_metadata(self):
        metadata = [
            {
                'label': { 'en': [ 'Identifier' ] },
                'value': { 'en': [
                '{0}/social-scientists-map-chicago/object/{1}.json'.format(self.domain, self.ark.split('/')[1]) ] },
            },
            {
                'label': { 'en': [ 'Title' ] },
                'value': { 'en': [ self.title ] }
            },
            {
                'label': { 'en': [ 'Creator' ] },
                'value': { 'en': [ 'University of Chicago. Social Science Research Committee.' ] }
            }
        ]

        # get DC metadata.
        with BytesIO(
            requests.get('http://ark.lib.uchicago.edu/{}/file.dc.xml'.format(
                self.ark,
            )).content
        ) as f:
            dc = ElementTree.fromstring(f.read())

        for label, xp in (
            ('Coverage', '{http://purl.org/dc/terms/}spatial'),
            ('Subject',  '{http://purl.org/dc/elements/1.1/}subject'),
            ('Type',     '{http://purl.org/dc/elements/1.1/}type')
        ):
            for e in dc.findall(xp):
                metadata.append(
                    {
                        'label': { 'en': [ label ] },
                        'value': { 'en': [ e.text ] }
                    }
                )

        metadata.append({
            'label': { 'en': [ 'Description' ] },
            'value': { 'en': [ self.summary ] }
        })
        metadata.append({
            'label': { 'en': [ 'Attribution' ] },
            'value': { 'en': [ self.required_statement ] }
        })
        metadata.append({
            'label': { 'en': [ 'ARK Identifier' ] },
            'value': { 'en': [ self.ark ] }
        })
        metadata.append({
            'label': { 'en': [ 'License' ] },
            'value': { 'en': [ '<a href="https://creativecommons.org/licenses/by-nc/4.0/">https://creativecommons.org/licenses/by-nc/4.0/</a>' ] }
        })

        return metadata


if __name__ == '__main__':
    arguments = docopt(__doc__)

    identifier = get_original_identifier_from_ark(arguments['<ark>'])

    # get DC metadata.
    with BytesIO(
        requests.get('http://ark.lib.uchicago.edu/{}/file.dc.xml'.format(
            arguments['<ark>']
        )).content
    ) as f:
        dc = ElementTree.fromstring(f.read())
    title = dc.find('{http://purl.org/dc/elements/1.1/}title').text

    print(
        json.dumps(
            SSMapsIIIFManifest(
                arguments['<domain>'],
                identifier,
                arguments['<ark>'],
                title,
                'Social Scientists Maps from the University of Chicago.',
                'University of Chicago Library'
            ).data(),
            indent=4,
            sort_keys=True
        )
    )
